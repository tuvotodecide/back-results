name: CI & CD for NestJS Project

on:
  push:
    branches: [main]
    paths:
      - 'Dockerfile'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'src/**'
      - '.github/workflows/**'
      - 'global-bundle.pem.enc'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_PLATFORMS: linux/arm64
  CACHE_TAG: buildcache

jobs:
  build:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
    environment: devops_aws
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
      ECR_REPO: ${{ vars.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (binfmt)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:v0.12.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Mantener el bundle como antes: se desencripta y se hornea en la imagen
      - name: Decrypt global-bundle.pem.enc
        if: hashFiles('global-bundle.pem.enc') != ''
        run: |
          set -euo pipefail
          openssl enc -aes-256-cbc -d -salt \
            -in global-bundle.pem.enc \
            -out global-bundle.pem \
            -pass pass:"${{ secrets.PASSPHRASE }}"

      - name: Build & Push (with cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: ${{ env.BUILD_PLATFORMS }}
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest
          cache-to: type=inline

      - name: Delete old untagged images in ECR
        run: |
          set -euo pipefail
          IMAGE_IDS=$(aws ecr list-images \
            --repository-name "${{ env.ECR_REPO }}" \
            --filter tagStatus=UNTAGGED \
            --query 'imageIds[*]' --output json)
          if [ "$IMAGE_IDS" != "[]" ]; then
            aws ecr batch-delete-image \
              --repository-name "${{ env.ECR_REPO }}" \
              --image-ids "$IMAGE_IDS"
          fi

  deploy:
    name: Deploy to EC2 via SSM
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: devops_aws
    permissions:
      contents: read
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
      ECR_REPO: ${{ vars.ECR_REPOSITORY }}
      EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      PUBLIC_IP: ${{ vars.PUBLIC_IP }}
      EXTERNAL_PORT: ${{ vars.EXTERNAL_PORT }}
      CONTAINER_NAME: back_results
      IMAGE_TAG: ${{ github.sha }}
      # Nombre del par√°metro en SSM con tu .env (SecureString)
      SSM_ENV_PARAM_NAME: ${{ vars.SSM_ENV_PARAM_NAME }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy container using SSM
        id: ssm
        shell: bash
        run: |
          set -euo pipefail
          echo "Deploying‚Ä¶"

          # Fallback por si no seteaste la var del repo
          SSM_NAME="${SSM_ENV_PARAM_NAME:-/miapp/dev/.env}"
          echo "Usando par√°metro SSM: $SSM_NAME"

          CMDS=$(jq -nc \
            --arg reg    "$ECR_REGISTRY" \
            --arg repo   "$ECR_REPO" \
            --arg tag    "$IMAGE_TAG" \
            --arg region "$AWS_REGION" \
            --arg port   "${EXTERNAL_PORT}" \
            --arg name   "$CONTAINER_NAME" \
            --arg ssm    "$SSM_NAME" \
            '[
              "aws ecr get-login-password --region \($region) | docker login --username AWS --password-stdin \($reg)",
              "docker pull --quiet \($reg)/\($repo):\($tag)",
              "docker stop \($name) || true",
              "docker rm \($name) || true",

              # 1) Obtener .env desde SSM
              "aws ssm get-parameter --name \($ssm) --with-decryption --query Parameter.Value --output text > .env",

              # 2) Normalizar fin de l√≠nea (CRLF -> LF) y validar formato simple KEY=VAL
              "sed -i 's/\\r$//' .env",
              "echo 'üîê Claves en .env (sin valores):' && awk -F= '/^[A-Za-z_][A-Za-z0-9_]*=/{print \" - \" $1}' .env | sort | uniq",

              # 3) Correr contenedor: si falta NODE_EXTRA_CA_CERTS en .env, lo inyecto apuntando al bundle dentro de la imagen
              \"EXTRA_CA=''; if ! grep -q '^NODE_EXTRA_CA_CERTS=' .env; then EXTRA_CA='-e NODE_EXTRA_CA_CERTS=/app/global-bundle.pem'; fi; \\
               docker run -d --name \($name) -p \($port):3000 --env-file .env $EXTRA_CA --restart unless-stopped \($reg)/\($repo):\($tag)\",

              # 4) Verificar que arranc√≥ y mostrar estado (sin secretos)
              \"echo 'üü¢ Estado del contenedor:' && docker ps --filter name=\($name) --format '{{.Names}}  {{.Status}}'\",
              \"echo 'üîé Vars clave en runtime (redactadas):' && docker inspect \($name) --format '{{range .Config.Env}}{{println .}}{{end}}' | grep -E '^(MONGODB_URI|MONGODB_USERNAME|MONGODB_PASSWORD|NODE_EXTRA_CA_CERTS)=' | sed 's/=.*/=***REDACTED***/'\",

              # 5) Borrado seguro del .env del host
              "shred -u .env || rm -f .env",

              # 6) Limpieza de im√°genes hu√©rfanas
              "docker image prune -f"
            ]')

          CMD_ID=$(aws ssm send-command \
            --instance-ids "$EC2_INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "GitHub Actions deploy" \
            --parameters "commands=$CMDS" \
            --query "Command.CommandId" --output text)

          echo "‚ñ∂Ô∏è SSM CommandId = $CMD_ID"

          aws ssm wait command-executed \
            --command-id "$CMD_ID" \
            --instance-id "$EC2_INSTANCE_ID"

          aws ssm get-command-invocation \
            --command-id "$CMD_ID" \
            --instance-id "$EC2_INSTANCE_ID" \
            --query "{Stdout:StandardOutputContent, Stderr:StandardErrorContent, Status:Status}" \
            --output text | sed 's/\\n/\n/g'

          STATUS=$(aws ssm get-command-invocation \
            --command-id "$CMD_ID" \
            --instance-id "$EC2_INSTANCE_ID" \
            --query Status --output text)

          [[ "$STATUS" == "Success" ]] || { echo "‚ùå Remote script failed"; exit 1; }

      - name: Health check loop
        shell: bash
        run: |
          set -euo pipefail
          echo "Testing http://${PUBLIC_IP}:${EXTERNAL_PORT}/"
          for i in {1..24}; do
            http_code=$(curl -s -o /dev/null -w '%{http_code}' --max-time 5 \
              "http://${PUBLIC_IP}:${EXTERNAL_PORT}/") || true
            if [[ "${http_code:-}" == "200" ]]; then
              echo "‚úÖ Servicio OK (${http_code})"
              exit 0
            fi
            echo "‚è≥ intento $i/24 ‚Äî code=${http_code:-timeout}"
            sleep 5
          done

          echo " Health-check failed :("
          aws ssm send-command \
            --instance-ids "$EC2_INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="docker logs --tail 200 $CONTAINER_NAME" \
            --query "Command.CommandId" --output text \
          | xargs -I{} aws ssm wait command-executed --command-id {} --instance-id "$EC2_INSTANCE_ID"
          exit 1
