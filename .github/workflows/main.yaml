name: CI & CD for NestJS Project

on:
  push:
    branches: [main]
    paths:
      - 'Dockerfile'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'src/**'
      - '.github/workflows/**'
      - 'global-bundle.pem.enc'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_PLATFORMS: linux/arm64
  CACHE_TAG: buildcache

jobs:
  build:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
    environment: devops_aws
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
      ECR_REPO: ${{ vars.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (binfmt)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:v0.12.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # SIEMPRE descifrar el bundle antes de construir la imagen
      - name: Decrypt global-bundle.pem.enc
        run: |
          set -euo pipefail
          if [ ! -f global-bundle.pem.enc ]; then
            echo "global-bundle.pem.enc no existe en el repo"; exit 1
          fi
          openssl enc -aes-256-cbc -d -salt \
            -in global-bundle.pem.enc \
            -out global-bundle.pem \
            -pass pass:"${{ secrets.PASSPHRASE }}"
          # Un hash para verificar que cambia invalida cache
          echo "BUNDLE_SHA256=$(sha256sum global-bundle.pem | cut -d' ' -f1)"

      - name: Build & Push (with cache bust)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          no-cache: true # fuerza incluir bundle recién descifrado
          platforms: ${{ env.BUILD_PLATFORMS }}
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest
          cache-to: type=inline

      - name: Delete old untagged images in ECR
        run: |
          set -euo pipefail
          IMAGE_IDS=$(aws ecr list-images \
            --repository-name "${{ env.ECR_REPO }}" \
            --filter tagStatus=UNTAGGED \
            --query 'imageIds[*]' --output json)
          if [ "$IMAGE_IDS" != "[]" ]; then
            aws ecr batch-delete-image \
              --repository-name "${{ env.ECR_REPO }}" \
              --image-ids "$IMAGE_IDS"
          fi

  deploy:
    name: Deploy to EC2 via SSM
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: devops_aws
    permissions:
      contents: read
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
      ECR_REPO: ${{ vars.ECR_REPOSITORY }}
      EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      PUBLIC_IP: ${{ vars.PUBLIC_IP }}
      EXTERNAL_PORT: ${{ vars.EXTERNAL_PORT }}
      CONTAINER_NAME: back_results
      IMAGE_TAG: ${{ github.sha }}
      SSM_ENV_PARAM_NAME: ${{ vars.SSM_ENV_PARAM_NAME }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy container using SSM
        id: ssm
        shell: bash
        run: |
          set -euo pipefail
          echo "Deploying…"

          SSM_NAME="${SSM_ENV_PARAM_NAME}"
          echo "Usando parámetro SSM: $SSM_NAME"

          CMDS=$(jq -nc \
            --arg reg    "$ECR_REGISTRY" \
            --arg repo   "$ECR_REPO" \
            --arg tag    "$IMAGE_TAG" \
            --arg region "$AWS_REGION" \
            --arg port   "${EXTERNAL_PORT}" \
            --arg name   "$CONTAINER_NAME" \
            --arg ssm    "$SSM_NAME" \
            '[
              "set -euo pipefail",
              "aws ecr get-login-password --region \($region) | docker login --username AWS --password-stdin \($reg)",
              "docker pull --quiet \($reg)/\($repo):\($tag)",
              "docker stop \($name) || true",
              "docker rm \($name) || true",
              # ↓ Obtener .env y normalizar saltos de línea (CRLF -> LF)
              "aws ssm get-parameter --name \($ssm) --with-decryption --query Parameter.Value --output text > .env",
              "sed -i \"s/\\r$//\" .env",
              "echo \"ENV bytes=$(wc -c < .env) lines=$(wc -l < .env)\"",
              # ↓ Ejecutar contenedor inyectando .env y asegurando CA bundle
              "docker run -d --name \($name) -p \($port):3000 --env-file .env -e NODE_EXTRA_CA_CERTS=/app/global-bundle.pem --restart unless-stopped \($reg)/\($repo):\($tag)",
              # ↓ Chequeos dentro del contenedor (sin exponer secretos)
              "sleep 2",
              "docker exec \($name) /bin/sh -lc 'set -e; [ -f /app/global-bundle.pem ] && echo \"bundle OK\" && ls -l /app/global-bundle.pem && sha256sum /app/global-bundle.pem | cut -c1-16 || (echo \"bundle MISSING\"; exit 1)'",
              "docker exec \($name) /bin/sh -lc 'env | grep -E \"^(MONGODB_URI|MONGODB_USERNAME|MONGODB_PASSWORD|NODE_EXTRA_CA_CERTS)=\" | sed \"s/=.*/=[REDACTED]/\*
