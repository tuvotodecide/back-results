name: CI & CD for NestJS Project

on:
  push:
    branches: [main]
    paths:
      - 'Dockerfile'
      - 'package.json'
      - 'package-lock.json'
      - 'src/**'
      - '.github/workflows/**'

env:
  BUILD_PLATFORMS: linux/arm64
  CACHE_TAG: buildcache

jobs:
  build:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    environment: devops_aws
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
      ECR_REPO: ${{ vars.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (binfmt)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:v0.12.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Un encrypt global-bundle.pem.enc
        run: |
          openssl enc -aes-256-cbc -d -salt -in global-bundle.pem.enc -out global-bundle.pem -pass pass:"${{ secrets.PASSPHRASE }}"

      - name: Build & Push (with cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          no-cache: true # Fuerza rebuild sin cache para refresh completo
          platforms: ${{ env.BUILD_PLATFORMS }}
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest
          cache-to: type=inline

      - name: Delete old untagged images in ECR
        run: |
          # List untagged images
          IMAGE_IDS=$(aws ecr list-images --repository-name ${{ env.ECR_REPO }} --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json)
          if [ "$IMAGE_IDS" != "[]" ]; then
            # Borra en batch
            aws ecr batch-delete-image --repository-name ${{ env.ECR_REPO }} --image-ids "$IMAGE_IDS"
          fi

  deploy:
    name: Deploy to EC2 via SSM
    needs: build
    runs-on: ubuntu-latest
    environment: devops_aws
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
      ECR_REPO: ${{ vars.ECR_REPOSITORY }}
      EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      PUBLIC_IP: ${{ vars.PUBLIC_IP }}
      EXTERNAL_PORT: ${{ vars.EXTERNAL_PORT }}
      CONTAINER_NAME: back_results
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy container via SSM
        id: ssm
        shell: bash
        run: |
          set -euo pipefail
          echo "Deploying $ECR_REGISTRY/$ECR_REPO:latest to $EC2_INSTANCE_ID"

          if [[ -z "${{ secrets.ENV }}" ]]; then
            echo "‚ùå ENV secret is empty or not set"
            exit 1
          fi

          # Encode .env content to base64 for safe multiline handling
          DOTENV_BASE64=$(echo -n '${{ secrets.ENV }}' | base64 -w 0)

          CMDS=$(jq -nc --arg reg "$ECR_REGISTRY" \
            --arg repo "$ECR_REPO" \
            --arg tag "$IMAGE_TAG" \
            --arg region "$AWS_REGION" \
            --arg port "${EXTERNAL_PORT}" \
            --arg name "$CONTAINER_NAME" \
            --arg dotenv_base64 "$DOTENV_BASE64" \
            '
          [
            "aws ecr get-login-password --region \($region) | docker login --username AWS --password-stdin \($reg)",
            "docker pull \($reg)/\($repo):\($tag)",
            "docker stop \($name) || true",
            "docker rm \($name) || true",
            "echo \($dotenv_base64) | base64 -d > .env",
            "docker run -d --name \($name) -p \($port):3000 --env-file .env --restart unless-stopped \($reg)/\($repo):\($tag)",
            "rm .env",  
            "docker image prune -f"
          ]')

          CMD_ID=$(aws ssm send-command \
            --instance-ids "$EC2_INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "GitHub Actions deploy" \
            --parameters "commands=$CMDS" \
            --output text \
            --query "Command.CommandId")
          echo "‚ñ∂ SSM CommandId = $CMD_ID"

          aws ssm wait command-executed --command-id "$CMD_ID" --instance-id "$EC2_INSTANCE_ID"

          aws ssm get-command-invocation \
            --command-id "$CMD_ID" --instance-id "$EC2_INSTANCE_ID" \
            --query "{Stdout:StandardOutputContent, Stderr:StandardErrorContent, Status:Status}" \
            --output text | sed 's/\\n/\n/g'

          STATUS=$(aws ssm get-command-invocation \
            --command-id "$CMD_ID" --instance-id "$EC2_INSTANCE_ID" \
            --query Status --output text)
          [[ "$STATUS" == "Success" ]] || { echo "‚ùå Remote script failed"; exit 1; }

      - name: Verify container is running
        run: |
          aws ssm send-command \
            --instance-ids "$EC2_INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=docker inspect -f '{{.State.Running}}' $CONTAINER_NAME" \
            --query "Command.CommandId" --output text \
          | xargs -I{} aws ssm wait command-executed --command-id {} --instance-id "$EC2_INSTANCE_ID"

      - name: Health check loop
        shell: bash
        run: |
          set -euo pipefail
          stdbuf -oL -eL echo "üîé Comprobando http://${PUBLIC_IP}:${EXTERNAL_PORT}/"
          for i in {1..24}; do # = 2 minutos m√°x.
            http_code=$(curl -s -o /dev/null -w '%{http_code}' \
              --max-time 5 \
              "http://${PUBLIC_IP}:${EXTERNAL_PORT}/") || true
            if [[ "$http_code" == "200" ]]; then
              echo "‚úÖ Servicio OK (${http_code})"; exit 0
            fi
            echo "‚è≥ intento $i/24 ‚Äî code=${http_code:-timeout}"
            sleep 5
          done
          echo "‚ùå Health‚Äëcheck failed, dumping container logs"
          aws ssm send-command \
            --instance-ids "$EC2_INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=docker logs --tail 200 $CONTAINER_NAME" \
            --query "Command.CommandId" --output text \
          | xargs -I{} aws ssm wait command-executed --command-id {} --instance-id "$EC2_INSTANCE_ID"
          exit 1
